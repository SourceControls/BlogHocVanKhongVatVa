generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model advertisement {
  advertisementId                  Int                  @id @default(autoincrement())
  title                            String               @db.VarChar(200)
  description                      String?              @db.VarChar(500)
  image                            String?              @db.VarChar(500)
  displayPosition                  ad_display_position?
  target                           String?              @db.VarChar(500)
  startDate                        DateTime?            @db.Date
  endDate                          DateTime?            @db.Date
  impressionCount                  Int                  @default(0)
  clickCount                       Int                  @default(0)
  visibility                       Boolean?             @default(true)
  price                            Decimal?             @default(0.0000000) @db.Decimal(10, 7)
  createdAt                        DateTime             @default(now())
  createdBy                        Int?
  updatedAt                        DateTime             @updatedAt
  updatedBy                        Int?
  user_advertisement_createdByUser user?                @relation("advertisement_createdByUser", fields: [createdBy], references: [userId], onDelete: SetNull, onUpdate: Cascade, map: "advertisement_ibfk_1")
  user_advertisement_updatedByUser user?                @relation("advertisement_updatedByUser", fields: [updatedBy], references: [userId], onDelete: SetNull, onUpdate: Cascade, map: "advertisement_ibfk_2")

  @@index([createdBy], map: "createdBy")
  @@index([updatedBy], map: "updatedBy")
}

model category {
  categoryId       Int                @id @default(autoincrement())
  categoryName     String             @unique(map: "categoryName") @db.VarChar(200)
  slug             String             @unique(map: "slug") @db.VarChar(200)
  description      String?            @db.VarChar(200)
  group            String?            @db.VarChar(200)
  createdAt        DateTime           @default(now())
  createdBy        Int
  updatedAt        DateTime           @updatedAt
  updatedBy        Int?
  updatedByUser    user?              @relation("category_updatedByUser", fields: [updatedBy], references: [userId], onDelete: Cascade, onUpdate: Cascade, map: "category_ibfk_1")
  createdByUser    user?              @relation("category_createdByUser", fields: [createdBy], references: [userId], onDelete: Cascade, onUpdate: Cascade, map: "category_ibfk_2")
  literaryCategory literaryCategory[]

  @@index([createdBy], map: "createdBy")
  @@index([updatedBy], map: "updatedBy")
}

model comment {
  commentId Int      @id @default(autoincrement())
  content   String   @db.VarChar(200)
  createdAt DateTime @default(now())
  postId    Int
  createdBy Int
  post      post     @relation(fields: [postId], references: [postId], onDelete: Cascade, onUpdate: Cascade, map: "comment_ibfk_1")
  user      user     @relation(fields: [createdBy], references: [userId], onDelete: Cascade, onUpdate: Cascade, map: "comment_ibfk_2")

  @@index([createdBy], map: "createdBy")
  @@index([postId], map: "postId")
}

model literary {
  literaryId       Int                @id @default(autoincrement())
  title            String             @unique(map: "title") @db.VarChar(200)
  slug             String             @unique(map: "slug") @db.VarChar(200)
  intro            String?            @db.Text
  summary          String?            @db.Text
  authorName       String?            @db.VarChar(200)
  featured         Boolean            @default(false)
  visibility       Boolean            @default(true)
  timeOfCreation   String?            @db.VarChar(500)
  image            String?            @db.VarChar(500)
  createdAt        DateTime           @default(now())
  createdBy        Int?
  updatedAt        DateTime           @updatedAt
  updatedBy        Int?
  view             Int                @default(0)
  postCount        Int                @default(0)
  updatedByUser    user?              @relation("literary_updatedByUser", fields: [updatedBy], references: [userId], onDelete: SetNull, onUpdate: Cascade, map: "literary_ibfk_1")
  createdByUser    user?              @relation("literary_createdByUser", fields: [createdBy], references: [userId], onDelete: SetNull, onUpdate: Cascade, map: "literary_ibfk_2")
  literaryCategory literaryCategory[]
  literaryPosts    post[]             @relation("post_literaryToliterary")

  @@index([createdBy], map: "createdBy")
  @@index([updatedBy], map: "updatedBy")
  @@fulltext([title, intro, summary, timeOfCreation, authorName])
}

model literaryCategory {
  categoryId Int
  literaryId Int
  category   category @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade, onUpdate: Cascade, map: "literaryCategory_ibfk_1")
  literary   literary @relation(fields: [literaryId], references: [literaryId], onDelete: Cascade, onUpdate: Cascade, map: "literaryCategory_ibfk_2")

  @@id([categoryId, literaryId])
  @@index([literaryId], map: "literaryId")
}

model post {
  postId          Int             @id @default(autoincrement())
  title           String          @db.VarChar(200)
  slug            String?         @unique(map: "slug") @default("") @db.VarChar(200)
  subTitle        String?         @default("") @db.VarChar(200)
  summary         String?         @default("") @db.VarChar(500)
  htmlContent     String?         @db.Text
  featuredImage   String?         @db.VarChar(500)
  featured        Boolean         @default(false)
  status          post_status     @default(DRAFT)
  visibility      post_visibility @default(PUBLIC)
  view            Int             @default(0)
  createdBy       Int?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  updatedBy       Int?
  publishedBy     Int?
  literary        Int?
  likeCount       Int             @default(0)
  dislikeCount    Int             @default(0)
  comment         comment[]
  updatedByUser   user?           @relation("post_updatedByUser", fields: [updatedBy], references: [userId], onDelete: SetNull, onUpdate: Cascade, map: "post_ibfk_1")
  publishedByUser user?           @relation("post_publishedByUser", fields: [publishedBy], references: [userId], onDelete: SetNull, onUpdate: Cascade, map: "post_ibfk_2")
  createdByUser   user?           @relation("post_createdByUser", fields: [createdBy], references: [userId], onDelete: SetNull, onUpdate: Cascade, map: "post_ibfk_3")
  postLiterary    literary?       @relation("post_literaryToliterary", fields: [literary], references: [literaryId], onDelete: SetNull, onUpdate: Cascade, map: "post_ibfk_4")
  postReaction    postReaction[]
  postTag         postTag[]

  @@index([createdBy], map: "createdBy")
  @@index([literary], map: "literary")
  @@index([publishedBy], map: "publishedBy")
  @@index([updatedBy], map: "updatedBy")
  // @@fulltext([title])
  // @@fulltext([summary])
  // @@fulltext([htmlContent])
  @@fulltext([title, summary])
}

model postReaction {
  postId    Int
  createdBy Int
  type      postReaction_type
  createdAt DateTime          @default(now())
  post      post              @relation(fields: [postId], references: [postId], onDelete: Cascade, onUpdate: Cascade, map: "postReaction_ibfk_1")
  user      user              @relation(fields: [createdBy], references: [userId], onDelete: Cascade, onUpdate: Cascade, map: "postReaction_ibfk_2")

  @@id([postId, createdBy])
  @@index([createdBy], map: "createdBy")
}

model postTag {
  postId    Int
  tagId     Int
  createdAt DateTime @default(now())
  tag       tag      @relation(fields: [tagId], references: [tagId], onDelete: Cascade, onUpdate: Cascade, map: "postTag_ibfk_1")
  post      post     @relation(fields: [postId], references: [postId], onDelete: Cascade, onUpdate: Cascade, map: "postTag_ibfk_2")

  @@id([postId, tagId])
  @@index([tagId], map: "tagId")
}

model setting {
  settingId        Int      @id @default(autoincrement())
  fontFamily       String   @db.VarChar(500)
  primaryColor     String   @db.VarChar(500)
  webTitle         String   @db.VarChar(500)
  logo             String   @db.VarChar(500)
  favIcon          String   @db.VarChar(500)
  homeHeroTitle    String   @db.VarChar(500)
  homeHeroSubtitle String   @db.VarChar(500)
  homeHeroCover    String   @db.VarChar(500)
  readPostCover    String   @db.VarChar(500)
  updatedAt        DateTime @updatedAt
  updatedBy        Int?

  @@index([updatedBy], map: "updatedBy")
}

model tag {
  tagId         Int       @id @default(autoincrement())
  tagName       String    @unique(map: "tagName") @db.VarChar(200)
  slug          String?   @unique(map: "slug") @db.VarChar(200)
  description   String?   @db.VarChar(500)
  createdAt     DateTime  @default(now())
  createdBy     Int?
  updatedAt     DateTime  @updatedAt
  updatedBy     Int?
  usedCount     Int?      @default(0)
  postTag       postTag[]
  updatedByUser user?     @relation("tag_updatedByUser", fields: [updatedBy], references: [userId], onDelete: SetNull, onUpdate: Cascade, map: "tag_ibfk_1")
  createdByUser user?     @relation("tag_createdByUser", fields: [createdBy], references: [userId], onDelete: SetNull, onUpdate: Cascade, map: "tag_ibfk_2")

  @@index([createdBy], map: "createdBy")
  @@index([updatedBy], map: "updatedBy")
}

model user {
  userId                                    Int             @id @default(autoincrement())
  name                                      String          @db.VarChar(200)
  slug                                      String?         @unique(map: "slug") @db.VarChar(200)
  bio                                       String?         @db.Text
  avatarImage                               String?         @db.VarChar(500)
  coverImage                                String?         @db.VarChar(500)
  status                                    user_status     @default(ACTIVE)
  email                                     String          @unique(map: "email") @db.VarChar(200)
  website                                   String?         @db.VarChar(500)
  password                                  String          @db.VarChar(200)
  role                                      user_role       @default(VIEWER)
  createdAt                                 DateTime        @default(now())
  updatedAt                                 DateTime        @updatedAt
  updatedBy                                 Int?
  advertisement_advertisement_createdByUser advertisement[] @relation("advertisement_createdByUser")
  advertisement_advertisement_updatedByUser advertisement[] @relation("advertisement_updatedByUser")
  category_category_updatedByUser           category[]      @relation("category_updatedByUser")
  category_category_createdByUser           category[]      @relation("category_createdByUser")
  comment                                   comment[]
  literary_literary_updatedByUser           literary[]      @relation("literary_updatedByUser")
  literary_literary_createdByUser           literary[]      @relation("literary_createdByUser")
  post_post_updatedByUser                   post[]          @relation("post_updatedByUser")
  post_post_publishedByUser                 post[]          @relation("post_publishedByUser")
  createdPosts                              post[]          @relation("post_createdByUser")
  postReaction                              postReaction[]
  tag_tag_updatedByUser                     tag[]           @relation("tag_updatedByUser")
  tag_tag_createdByUser                     tag[]           @relation("tag_createdByUser")
}

enum postReaction_type {
  LIKE
  DISLIKE
  NO
}

enum post_visibility {
  PUBLIC
  MEMBER
  PAIDMEMBER
}

enum user_status {
  ACTIVE
  BANNED
}

enum ad_display_position {
  HOME
  SEARCH
  READ
  LITERARY
}

enum post_status {
  DRAFT
  PENDING
  PUBLISHED
  HIDE
  DELETED
}

enum user_role {
  VIEWER
  CONTRIBUTOR
  ADMIN
  SUPERADMIN
}
